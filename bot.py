import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from ollama import chat
from dotenv import load_dotenv

load_dotenv()

TG_BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
OLLAMA_MODEL = os.getenv('OLLAMA_MODEL')

PROMPT_TEMPLATE = """
–ò—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —è–≤–Ω–æ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å:
{question}

–û—Ç–≤–µ—Ç:
"""

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
vector_store = FAISS.load_local("models/faiss_index", embeddings=embeddings, allow_dangerous_deserialization=True)
retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 3})


def query_ollama(prompt):
    try:
        response = chat(
            model=OLLAMA_MODEL,
            messages=[
                {'role': 'system', 'content': '–¢—ã —è–≤–ª—è–µ—à—å—Å—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º - –ø–æ–º–æ—â–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ç—å—è—Ö –∞–≤—Ç–æ—Ä–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.'},
                {'role': 'user', 'content': prompt},
            ],
        )
        return response.message.content
    except Exception as e:
        return f'–û—à–∏–±–∫–∞: {e}'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    await update.message.reply_text("–†–∞–∑–±–∏—Ä–∞—é—Å—å –≤ –≤–æ–ø—Ä–æ—Å–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç—å–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

    try:
        retrieved_docs = retriever._get_relevant_documents(user_message, run_manager=None)
        context = "\n".join([doc.page_content for doc in retrieved_docs])

        prompt = PROMPT_TEMPLATE.format_map({
            'context': context,
            'question': user_message})
        response = query_ollama(prompt)

        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


async def about_author(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ"."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –ê–≤—Ç–æ—Ä ‚Äî —Å—Ç—É–¥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –ª—É—á—à–µ –∏ –±—ã—Å—Ç—Ä–µ–µ —É—Å–≤–∞–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!"
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ", callback_data='about_author')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ —Å—Ç–∞—Ç—å—è–º. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∞—Ç—å—è–º –∞–≤—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!',
        reply_markup=reply_markup
    )


def main():
    app = ApplicationBuilder().token(TG_BOT_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(about_author, pattern='about_author'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...')
    app.run_polling()


if __name__ == '__main__':
    main()
